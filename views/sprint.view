<components>
    su-context-menu
    su-context-menu-item
</components>

<view>
    <h1 v-if="loaded">
        {{ sprintName }}
        <!-- Flipped order because of right float: -->
        <button id="refresh-button" class="btn btn-default" @click="loadData">Refresh</button>
        <a v-if="boardId" id="board-button" class="btn btn-default jira" :href="`${$global.jiraUrl}/secure/RapidBoard.jspa?rapidView=${boardId}`" target="_blank">Board</a>
    </h1>
    <h1 v-else>Loading...</h1>

    <div v-if="loaded" class="filters">
        <button v-for="member in members" @click="filterUsername = (filterUsername == member.username) ? null : member.username" :class="['btn', 'btn-sm', (filterUsername == member.username) ? 'btn-primary' : null]"><img :src="member.avatar" class="avatar"><div class="name">{{ member.username }}</div></button>
    </div>
    <div v-if="loaded" class="filters">
        <button v-for="status in statuses" @click="$set(filterStatuses, status.name, (filterStatuses[status.name] === false))" :class="['btn', 'btn-sm', (filterStatuses[status.name] !== false) ? 'btn-primary': null]"><img :src="`/static/images/status-${status.category}.png`" class="status"><div class="name">{{ status.name }}</div></button>
    </div>

    <table class="issues">
        <tr>
            <th></th>
            <th></th>
            <th>Key</th>
            <!--<th></th>-->
            <th>Assignee</th>
            <th>Hours</th>
            <th>Summary</th>
            <th></th>
        </tr>
        <tr v-if="!loaded" class="loading-row">
            <td colspan="6">
                <vue-simple-spinner></vue-simple-spinner>
            </td>
        </tr>
        <tr v-if="loaded && error">
            <td colspan="6">
                <su-callout type="danger" title="Error">
                    {{ error }}
                </su-callout>
            </td>
        </tr>
        <tr v-for="(issue, idx) in issuesOrdered.filter(isVisible)" :key="`row-${issue.id}`" :data-id="issue.id" class="issue" :class="[`status-category-${issue.status.category}`, {sprint: issue.inSprint}]">
            <td class="index">
                <vue-simple-spinner v-if="processing.includes(issue)" size="small"></vue-simple-spinner>
                <span v-else class="badge">{{ idx + 1 }}</span>
            </td>
            <td class="status" @click.prevent="popup(issue, 'status_menu', $event)"><img :src="`/static/images/status-${issue.status.category}.png`" :title="issue.status.name"></td>
            <td class="key">{{ issue.key }}</td>
            <!--<td class="expander"></td>-->
            <td v-if="issue.assignee" class="assignee" @click.prevent="popup(issue, 'assignee_menu', $event)">
                <img :src="issue.assignee.avatar" class="avatar">
                <div class="name">{{ issue.assignee.username }}</div>
            </td>
            <td v-else class="assignee" @click.prevent="popup(issue, 'assignee_menu', $event)">
                Unassigned
            </td>
            <td class="hours" v-if="issue.tracking" @click.prevent="popup(issue, 'hours_box', $event)">
                <vue-simple-progress v-if="issue.tracking.remaining !== null" text-position="top" :text="formatSeconds(issue.tracking.remaining)" :val="Math.max(0, issue.tracking.estimate - issue.tracking.remaining)" :max="issue.tracking.estimate"></vue-simple-progress>
                <div v-else class="unestimated">Unestimated</div>
            </td>
            <td class="hours" v-else></td>
            <td class="summary" :style="`padding-left: ${issue.indent * 30}px;`" @click="issue.expanded = !issue.expanded">
                <img :src="issue.type.icon" :title="issue.type.name" class="type"> <span class="summary-text">{{ issue.summary }}</span>
                <transition-group enter-active-class="animated fadeInLeftShort quick" leave-active-class="animated fadeOutRightShort quick">
                    <template v-if="issue.expanded">
                        <su-callout v-if="issue.description" :key="`description-${issue.id}`" v-html="issue.description" class="description"></su-callout>
                        <su-callout v-for="comment in issue.comments" :key="`comment-${comment.id}`" class="comment">
                            <div class="comment-header">Comment by <img :src="comment.author.avatar" class="avatar"><div class="name">{{ comment.author.username }}</div></div>
                            <div v-html="comment.body"></div>
                        </su-callout>
                        <su-callout v-if="!(issue.description || issue.comments.length > 0)" :key="`description-${issue.id}`" type="danger">
                            <i>No description</i>
                        </su-callout>
                    </template>
                </transition-group>
            </td>
            <td class="links">
                <a :href="`${$global.jiraUrl}/browse/${issue.key}`" title="View on Jira" target="_blank"><img :src="`${$global.jiraUrl}/images/64jira.png`"></a>
            </td>
        </tr>
    </table>

    <transition enter-active-class="animated fadeIn quick" leave-active-class="animated fadeOut quick">
        <su-context-menu v-if="menuIssue" ref="status_menu" class="status-menu" @close="menuIssue = null">
            <ul>
                <su-context-menu-item
                        v-for="transition in menuIssue.transitions"
                        :key="`status-item-${transition.id}`"
                        :icon="`/static/images/status-${transition.status.category}.png`"
                        :title="transition.status.name"
                        :text="transition.name"
                        @click="doTransition(menuIssue, transition)"
                ></su-context-menu-item>
            </ul>
        </su-context-menu>
    </transition>

    <transition enter-active-class="animated fadeIn quick" leave-active-class="animated fadeOut quick">
        <su-context-menu v-if="menuIssue" ref="assignee_menu" class="assignee-menu" @close="menuIssue = null">
            <ul>
                <!-- Current user -->
                <su-context-menu-item
                    v-if="menuIssue.assignee && menuIssue.assignee.username != $global.user.username"
                    :icon="$global.user.avatar"
                    :text="$global.user.username"
                    @click="doAssign(menuIssue, $global.user)"
                    style="border-bottom: 1px solid #bdbdbd"
                ></su-context-menu-item>
                <su-context-menu-item
                    v-for="member in members"
                    v-if="member.username != $global.user.username && (!menuIssue.assignee || member.username != menuIssue.assignee.username)"
                    :key="`assignee-item-${member.username}`"
                    :icon="member.avatar"
                    :text="member.username"
                    @click="doAssign(menuIssue, member)"
                ></su-context-menu-item>
                <!-- Prompt for user -->
                <su-context-menu-item
                    text="Other"
                    @click="doAssignPrompt(menuIssue)"
                    style="border-top: 1px solid #bdbdbd"
                ></su-context-menu-item>
            </ul>
        </su-context-menu>
    </transition>

    <transition enter-active-class="animated flipInX quick" leave-active-class="animated flipOutX quick">
        <su-context-menu v-if="menuIssue" ref="hours_box" class="hours-box" :close-on-click="false" @close="menuIssue = null">
            <button v-if="menuHours * 60 * 60 != menuIssue.tracking.remaining" class="apply btn btn-sm btn-primary" @click="doHours(menuIssue, menuHours); $refs.hours_box.close()"><i class="fa fa-check"></i>&nbsp;Apply</button>
            <div class="remaining"><input type="text" :value="`${menuHours}h`" @change="setMenuHours($event.srcElement)"> remaining</div>
            <template v-if="menuIssue.tracking.estimate">
                <div class="estimate"><span>{{ formatSeconds(menuIssue.tracking.estimate) }}</span> estimated</div>
                <vue-simple-progress size="large" :val="Math.max(0, menuIssue.tracking.estimate - (menuHours * 60 * 60))" :max="menuIssue.tracking.estimate"></vue-simple-progress>
            </template>
            <template v-else>
                <!-- This shows tasks with 0h estimates as "unestimated", even though that's technically distinct from no estimate -->
                <div class="estimate">No original estimate</div>
                <vue-simple-progress class="unestimated" size="large" :val="100"></vue-simple-progress>
            </template>
            <div class="hour-buttons">
                <template v-for="amt in [+8, +4, +1, 0, -1, -4, -8]">
                    <button v-if="amt" :class="['btn', 'btn-sm', amt < 0 ? 'btn-success' : 'btn-danger']" @click="menuHours = Math.max(0, menuHours + amt)">
                        {{ (amt > 0 ? '+' : '') + amt }}h
                    </button>
                    <div v-else class="spacer"></div>
                </template>
            </div>
        </su-context-menu>
    </transition>
</view>

<script>
    Vue.use(Toasted, {
       iconPack: 'fontawesome'
    });
</script>

<script vue>
    export default {
        //TODO Make this work? Would be before the export default
        // import SuContextMenuItem from "../components/su-context-menu-item";
        components: {
        //     SuContextMenuItem,
        },
        data: {
            sprintId: null,

            // Loaded via AJAX
            sprintName: null,
            boardId: null,
            members: [],
            issues: [],
            parents: [],

            loaded: false,
            error: null,
            filterUsername: null, // Only show issues assigned to this user
            filterStatuses: {}, // Only show issues with statuses that map to true here, or are omitted (done this way because all statuses are shown by default)
            processing: [], // issues currently processing. Sets aren't reactive :(
            menuIssue: null, // issue we're showing a context menu for
            menuHours: null, // hours for issue we're showing a context menu for. Only relevant for hours popup
        },
        mounted: function() {
            this.loadData();
            self = this;
            window.addEventListener('hashchange', function() {
                self.filterUsername = window.location.hash ? window.location.hash.substr(1) : null;
            });
        },
        computed: {
            issuesOrdered: function() {
                var order = [];
                var awaitingPlacement = [];

                // Place all root elements and queue the rest
                for(let issue of this.issues.concat(this.parents)) {
                    (issue.parent ? awaitingPlacement : order).push(issue);
                }

                // On first pass, place all elements just below root. Then the elements just below those. Keep looping until everything is placed
                while(awaitingPlacement.length > 0) {
                    for(var i = 0; i < order.length; i++) {
                        var parent = order[i];

                        // Split 'awaitingPlacement' into two lists:
                        var placeNow = [], stillWaiting = [];
                        awaitingPlacement.forEach(issue => ((issue['parent'] === parent.id) ? placeNow : stillWaiting).push(issue));

                        if(placeNow.length > 0) {
                            //TODO A computed property modifying the field of a data element probably isn't good design, but it seems to work
                            placeNow.forEach(issue => issue.indent = parent.indent + 1);
                            order.splice.apply(order, [i + 1, 0, ...placeNow]);
                            i += placeNow.length;
                            awaitingPlacement = stillWaiting;
                        }
                    }
                }

                return order;
            },
            treeAssignees: function() { // Maps issue ID to a list of assignees for that issue and all descendents
                var issuesById = new Map(this.issuesOrdered.map(issue => [issue.id, issue]));
                var rtn = new Map();
                for(let issue of this.issuesOrdered) {
                    rtn.set(issue.id, []);
                    for(var seek = issue; seek; seek = issuesById.get(seek.parent)) {
                        rtn.get(seek.id).push(issue.assignee ? issue.assignee.username : null);
                    }
                }
                return rtn;
            },
            statuses: function() {
                // Complete list of statuses is at api/project/{key}/statuses, but it would take an extra API query. Just show the statuses that are currently in use in the sprint.
                // Sorted in bulk categories (new, then indeterminate, then done), and alphabetized within those
                var statuses = {
                    new: new Set(),
                    indeterminate: new Set(),
                    done: new Set(),
                }
                this.issues.forEach(issue => statuses[issue.status.category].add(issue.status.name));
                var setToObj = category => Array.from(statuses[category]).sort().map(name => ({name: name, category: category}));
                return [
                    ...setToObj('new'),
                    ...setToObj('indeterminate'),
                    ...setToObj('done'),
                ]
            },
        },
        watch: {
            sprintName: function(newVal) {
                document.title = newVal ? `${newVal} - Standup` : 'Standup';
            },
            filterUsername: function(newVal) {
                if(newVal && !this.members.some(member => member.username == newVal)) {
                    this.filterUsername = null;
                } else {
                    window.location.hash = newVal ? '#' + newVal : '';
                }
            },
        },
        methods: {
            loadData: function() {
                var self = this;
                self.loaded = false;
                $.get({
                    url: window.location.pathname + '/data',
                    success: function(data) {
                        self.error = null;
                        self.sprintName = data.sprint_name;
                        self.boardId = data.board_id;
                        self.members = data.members;
                        self.issues = data.issues;
                        self.parents = data.parents;
                        self.processing.splice(0, self.processing.length);

                        // Add on a few issue fields for use by issuesOrdered
                        for(let issue of self.issues) {
                            Vue.set(issue, 'inSprint', true);
                            Vue.set(issue, 'indent', 0);
                            Vue.set(issue, 'expanded', false);
                        }
                        for(let issue of self.parents) {
                            Vue.set(issue, 'inSprint', false);
                            Vue.set(issue, 'indent', 0);
                            Vue.set(issue, 'expanded', false);
                        }

                        if(window.location.hash) {
                            self.filterUsername = window.location.hash.substr(1);
                        }

                        if(self.filterUsername && !self.members.some(member => member.username == self.filterUsername)) {
                            self.filterUsername = null;
                        }

                        self.loaded = true;
                    },
                    error: function(xhr, type, desc) {
                        console.error(type);
                        console.error(desc);
                        self.error = (type == 'error') ? xhr.responseText : desc;
                        if(!self.error) {
                            self.error = 'Unknown error';
                        }
                        self.sprintName = 'Error';
                        self.loaded = true;
                    }
                })
            },
            formatSeconds: function(seconds) {
                if(seconds < 60) {
                    return 'Done';
                }

                // var weeks = Math.floor(seconds / 60 / 60 / 8 / 5);
                // seconds -= weeks * 60 * 60 * 8 * 5;

                // var days = Math.floor(seconds / 60 / 60 / 8);
                // seconds -= days * 60 * 60 * 8;

                var hours = Math.floor(seconds / 60 / 60);
                seconds -= hours * 60 * 60;

                var minutes = Math.floor(seconds / 60);
                seconds -= minutes * 60;

                // seconds should be 0 at this point; if not discard the rest

                return [
                    // weeks ? weeks + 'w' : null,
                    // days ? days + 'd' : null,
                    hours ? hours + 'h' : null,
                    minutes ? minutes + 'm' : null,
                ].filter(x => x).join(' ');
            },
            isVisible: function(issue) {
                if(!this.loaded || this.error) {
                    return false;
                }
                if(this.filterUsername && !this.treeAssignees.get(issue.id).includes(this.filterUsername)) {
                    return false;
                }
                if(this.filterStatuses[issue.status.name] === false) {
                    return false;
                }
                return true;
            },
            popup: function(issue, menuName, e) {
                this.menuIssue = issue;
                this.menuHours = Math.ceil(issue.tracking.remaining / 60 / 60);
                // Need to render so the menu will be created now that menuIssue is non-null
                this.$nextTick(() => this.$refs[menuName].open(e));
            },
            setMenuHours: function(el) {
                match = el.value.match(/^([0-9]+)h?$/);
                if(match) {
                    this.menuHours = parseInt(match[1], 10);
                } else {
                    Vue.toasted.show("Bad hours value", {
                        position: 'bottom-center',
                        duration: 10000,
                        icon: 'exclamation-circle',
                        type: 'error',
                        closeOnSwipe: true,
                    });
                }
                // Let Vue rerender the <input> to make sure it's consistent.
                // This will undo the user's change if it was bad, and restore the 'h' suffix if it's missing
                this.$forceUpdate();
            },
            doUpdate: function(issue, data, onSuccess) {
                var self = this;
                data.issue = issue.id;
                self.processing.push(issue);
                $.post({
                    url: window.location.pathname + '/update',
                    data: data,
                    complete: function(xhr, status) {
                        self.processing.splice(self.processing.indexOf(issue), 1);
                    },
                    success: function(data) {
                        onSuccess(data);
                    },
                    error: function(xhr, type, desc) {
                        console.error(type);
                        console.error(desc);
                        var error = (type == 'error') ? xhr.responseText : desc;
                        if(!error) {
                            error = 'Unknown error';
                        }
                        Vue.toasted.show(`Failed to update task: ${error}`, {
                            position: 'bottom-center',
                            duration: 10000,
                            icon: 'exclamation-circle',
                            type: 'error',
                            closeOnSwipe: true,
                        });
                    }
                })
            },
            doTransition: function(issue, transition) {
                this.doUpdate(
                    issue,
                    {transition: transition.id},
                    function(data) {
                        issue.status = transition.status;
                        issue.transitions = data;
                    },
                );
            },
            doAssign: function(issue, user) {
                this.doUpdate(
                    issue,
                    {assignee: user.username},
                    function(data) {
                        issue.assignee = user;
                    },
                );
            },
            doAssignPrompt: function(issue) {
                // At some point I should probably get unlazy about this:
                var username = prompt('Username:')
                if(username == null) {
                    return;
                }
                var self = this;
                this.doUpdate(
                    issue,
                    {assignee: username, returnUserInfo: true},
                    function(data) {
                        issue.assignee = data;
                        // Also want to insert into this.members, but it's sorted by username
                        for(var i = 0; i < self.members.length; i++) {
                            switch(self.members[i].username.localeCompare(data.username)) {
                                case 0:
                                    return;
                                case 1:
                                    self.members.splice(i, 0, data);
                                    return;
                            }
                        }
                        self.members.push(data);
                    },
                );
            },
            doHours: function(issue, hours) {
                this.doUpdate(
                    issue,
                    {remaining: hours + 'h', estimate: (issue.tracking.estimate == null) ? null : this.formatSeconds(issue.tracking.estimate)},
                    function(data) {
                        issue.tracking.remaining = hours * 60 * 60;
                        // Matching Jira's behavior:
                        if(issue.tracking.estimate == null) {
                            issue.tracking.estimate = issue.tracking.remaining;
                        }
                    }
                )
            }
        }
    }
</script>

<style type="less">
    h1 {
        #board-button, #refresh-button {
            float: right;
            margin-left: 10px;
        }
    }

    .filters {
        display: inline-block;
        margin: -5px 30px 10px 0;

        .btn-primary {
            background-color: #286090;
            border-color: #204d74;
        }
    }

    .issues tr.issue .assignee, .issues tr.issue .summary .comment, .filters button {
        margin-right: 3px;
        img.avatar, img.status {
            width: 16px;
            margin-right: 3px;
        }
        div.name {
            display: inline-block;
        }
    }

    .issues {
        width: 100%;
        border-spacing: 0;

        tr.loading-row td {
            padding-top: 10px;
        }

        tr.issue {
            &:hover td {
                background-color: #d9edf7;
                border-color: #d9edf7;
            }

            &:not(.sprint) {
                opacity: .4;
            }

            &.status-category-indeterminate {
                .key, .summary > span.summary-text {
                    font-weight: bold;
                }
            }

            &.status-category-done {
                .key, .summary > span.summary-text {
                    text-decoration: line-through;
                }
            }

            /*
            &.status-category-done {
                // Strikethrough. https://stackoverflow.com/a/19670807/309308
                // Not sure I actually like how it looks
                td {
                    position: relative;
                }
                td:before {
                    content: " ";
                    position: absolute;
                    top: 50%;
                    left: 0;
                    border-bottom: 1px solid #111;
                    width: 100%;
                }
            }
            */

            td {
                padding: 4px 1px;
                vertical-align: top;

                img {
                    position: relative;
                    top: -1px;
                }
            }

            .index {
                text-align: right;
                .badge {
                    background-color: #3a87ad;
                }
            }

            .status {
                padding-left: 5px;
                padding-right: 5px;
            }

            .key, .assignee, .hours {
                padding-right: 20px;
                white-space: nowrap;
            }

            .summary {
                width: 100%;

                .bd-callout p:first-child {
                    margin-top: 0;
                }

                .comment .comment-header {
                    border-bottom: 1px solid #aaa;
                    padding-bottom: 4px;
                }
            }

            .hours {
                .vue-simple-progress {
                    width: 100px;
                }
                .unestimated {
                    padding: 2px auto;
                    text-align: center;
                }
            }

            .links {
                padding: 0 10px;
                img {
                    width: 16px;
                }
            }

            .status, .assignee, .hours, .summary {
                cursor: pointer;
            }
        }
    }

    /* // Don't think this can be done without subgrid support
    .issues {
        display: grid;
        grid-template-areas: "status key expander type summary assignee hours";
        grid-template-columns: max-content max-content max-content max-content auto max-content max-content;
        .issue {
            display: contents;
            margin-bottom: 10px;
            .status {
                grid-area: status;
            }
            .key {
                grid-area: key;
            }
            .expander {
                grid-area: expander;
            }
            .type {
                grid-area: type;
            }
            .summary {
                grid-area: summary;
            }
            .assignee {
                grid-area: assignee;
                img {
                    width: @icon-width;
                    margin-right: 3px;
                }
                div.username {
                    display: inline-block;
                }
            }
            .hours {
                grid-area: hours;
                .estimate {
                    display: inline-block;
                }
                .remaining {
                    display: inline-block;
                }
            }
        }
    }
    */

    .v-context {
        width: auto;
        ul {
            padding: 0;
            li {
                padding: 10px;
                img {
                    position: relative;
                    top: -2px;
                }
            }
        }

        &.hours-box {
            border: 1px solid #000;
            width: 250px;
            height: 170px;
            padding: 10px;
            .remaining {
                position: relative;
                top: 8px;
                text-align: right;
                font-size: 1.5em;
                span {
                    font-size: 2em;
                }
                input {
                    text-align: right;
                    border: 0;
                    background: inherit;
                    width: 4ch;
                    font-size: 2em; // This stacks on top of the outer size
                }
            }
            .estimate {
                text-align: right;
            }
            .vue-simple-progress-bar {
                margin-top: 5px;
            }
            .unestimated .vue-simple-progress-bar {
                background: repeating-linear-gradient(-45deg, #2196f3, #2196f3 10px, #104775 10px, #104775 20px) !important;
            }
            .hour-buttons {
                display: flex;
                margin-top: 10px;
                button {
                    padding: 4px 5px;
                    margin: 2px;
                }
                .spacer {
                    flex-grow: 1;
                }
            }
            button.apply {
                position: absolute;
                top: 3px;
                right: 13px;
                z-index: 1 // Otherwise the button ends up partially underneath the remaining estimate
            }
        }
    }

    .animated.quick {
        -webkit-animation-duration: 250ms;
        animation-duration: 250ms;
    }

    @keyframes fadeInLeftShort {
        from {
            opacity: 0;
            transform: translate3d(-10%, 0, 0);
        }

        to {
            opacity: 1;
            transform: translate3d(0, 0, 0);
        }
    }

    .animated.fadeInLeftShort {
        animation-name: fadeInLeftShort;
    }

    @keyframes fadeOutRightShort {
        from {
            opacity: 1;
        }

        to {
            opacity: 0;
            transform: translate3d(20%, 0, 0);
        }
    }

    .animated.fadeOutRightShort {
        animation-name: fadeOutRightShort;
    }
</style>